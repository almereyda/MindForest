//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindForest.Models
{
  using System;
  using System.Data.Entity;
  using System.Data.Entity.Core.Objects;
  using System.Data.Entity.Core.Objects.DataClasses;
  using System.Data.Entity.Infrastructure;
  using System.Linq;
    
    public partial class ForestEntities : DbContext
    {
        public ForestEntities()
            : base("name=ForestEntities")
        {
    		        this.Configuration.LazyLoadingEnabled = false;
        }
    		public ForestEntities(string ConnectionName)
            : base("name=" + ConnectionName)
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Node> Nodes { get; set; }
        public DbSet<Connection> Connections { get; set; }
        public DbSet<Membership> Memberships { get; set; }
        public DbSet<OAuthMembership> OAuthMemberships { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
    
        public virtual ObjectResult<Node> GetTreeInfo(string user, string lang)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Node>("GetTreeInfo", userParameter, langParameter);
        }
    
        public virtual ObjectResult<Node> GetTreeInfo(string user, string lang, MergeOption mergeOption)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Node>("GetTreeInfo", mergeOption, userParameter, langParameter);
        }
    
        [EdmFunction("ForestEntities", "GetChildConnections")]
        public virtual IQueryable<ConnectionInfo> GetChildConnections(string user, string lang, Nullable<int> nodeId, Nullable<int> levels)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ConnectionInfo>("[ForestEntities].[GetChildConnections](@User, @Lang, @NodeId, @Levels)", userParameter, langParameter, nodeIdParameter, levelsParameter);
        }
    
        public virtual ObjectResult<Node> GetNodeDetails(string user, string lang, Nullable<int> nodeId)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Node>("GetNodeDetails", userParameter, langParameter, nodeIdParameter);
        }
    
        public virtual ObjectResult<Node> GetNodeDetails(string user, string lang, Nullable<int> nodeId, MergeOption mergeOption)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Node>("GetNodeDetails", mergeOption, userParameter, langParameter, nodeIdParameter);
        }
    
        [EdmFunction("ForestEntities", "GetParentConnections")]
        public virtual IQueryable<ConnectionInfo> GetParentConnections(string user, string lang, Nullable<int> nodeId, Nullable<int> levels)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var levelsParameter = levels.HasValue ?
                new ObjectParameter("Levels", levels) :
                new ObjectParameter("Levels", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ConnectionInfo>("[ForestEntities].[GetParentConnections](@User, @Lang, @NodeId, @Levels)", userParameter, langParameter, nodeIdParameter, levelsParameter);
        }
    
        public virtual ObjectResult<ParentsLookup> GetParentsLookup(Nullable<long> treeId, string user, string lang)
        {
            var treeIdParameter = treeId.HasValue ?
                new ObjectParameter("TreeId", treeId) :
                new ObjectParameter("TreeId", typeof(long));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var langParameter = lang != null ?
                new ObjectParameter("Lang", lang) :
                new ObjectParameter("Lang", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ParentsLookup>("GetParentsLookup", treeIdParameter, userParameter, langParameter);
        }
    }
}
